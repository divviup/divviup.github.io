"use strict";(self.webpackChunkpublic_docs=self.webpackChunkpublic_docs||[]).push([[826],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(n),c=r,h=p["".concat(s,".").concat(c)]||p[c]||u[c]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={},o="Emulating Categorical Histograms with DAP draft-04",l={unversionedId:"product-documentation/categorical-histogram-dap-04",id:"product-documentation/categorical-histogram-dap-04",title:"Emulating Categorical Histograms with DAP draft-04",description:"The Prio3Histogram VDAF has changed between drafts 04 and 07 of DAP. Initially,",source:"@site/docs/product-documentation/categorical-histogram-dap-04.md",sourceDirName:"product-documentation",slug:"/product-documentation/categorical-histogram-dap-04",permalink:"/product-documentation/categorical-histogram-dap-04",draft:!1,editUrl:"https://github.com/divviup/public-docs/tree/main/docs/product-documentation/categorical-histogram-dap-04.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Product Documentation",permalink:"/product-documentation/"}},s={},m=[{value:"Background",id:"background",level:2},{value:"Prio3Histogram, DAP draft-04",id:"prio3histogram-dap-draft-04",level:3},{value:"Prio3Histogram, DAP draft-07",id:"prio3histogram-dap-draft-07",level:3},{value:"Solution",id:"solution",level:2},{value:"Multidimensional Histograms",id:"multidimensional-histograms",level:3}],d={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"emulating-categorical-histograms-with-dap-draft-04"},"Emulating Categorical Histograms with DAP draft-04"),(0,r.kt)("p",null,"The Prio3Histogram VDAF has changed between drafts 04 and 07 of DAP. Initially,\nit provided the functionality of a conventional histogram of a continuous\nvariable. As of draft-07, its API has changed to be more flexible, supporting\nother use cases like categorical variables, multidimensional histograms, etc.\nThis guide covers how to emulate this behavior and use Prio3Histogram as of DAP\ndraft-04 to count occurrences of different values of a categorical variable.\nThis is only applicable to deployments using older versions of the protocol;\nnewer deployments using draft-07 or later can disregard this guide."),(0,r.kt)("h2",{id:"background"},"Background"),(0,r.kt)("h3",{id:"prio3histogram-dap-draft-04"},"Prio3Histogram, DAP draft-04"),(0,r.kt)("p",null,"This version uses the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-prio3histogram"},"definition of Prio3Histogram from VDAF\ndraft-05"),".\nThe VDAF has one parameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets"),", which is a list of integers in ascending\norder. The measurement is an integer, which gets compared to each value in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," parameter."),(0,r.kt)("p",null,"Measurements are encoded into a vector that has a 1 in one element and a 0\nelsewhere. The length of the encoded vector is one more than the length of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," parameter. The encoding procedure divides the number line into\nintervals, separated at the numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," parameter, and assigns each\nelement of the encoded measurement vector to one of the intervals, in increasing\norder. Then, for any measurement, the interval that contains that measurement\nvalue is identified, the corresponding vector element is set to 1, and the rest\nare set to 0. Each interval includes its maximum boundary value and excludes its\nminimum boundary value. In particular, if the measurement is less than or equal\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets[0]"),", then the output is ",(0,r.kt)("inlineCode",{parentName:"p"},"<1, 0, 0, 0, ... 0>"),". If the measurement is\ngreater than ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets[0]")," and less than or equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets[1]"),", then the\noutput is ",(0,r.kt)("inlineCode",{parentName:"p"},"<0, 1, 0, 0, ... 0>"),". If the measurement is greater than\n",(0,r.kt)("inlineCode",{parentName:"p"},"buckets[len(buckets) - 1]"),", then the output is ",(0,r.kt)("inlineCode",{parentName:"p"},"<0, 0, 0, ... 0, 1>"),"."),(0,r.kt)("h3",{id:"prio3histogram-dap-draft-07"},"Prio3Histogram, DAP draft-07"),(0,r.kt)("p",null,"This version uses the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-07.html#name-prio3histogram"},"definition of Prio3Histogram from VDAF\ndraft-07"),".\nThe vdaf has two parameters, ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"chunk_length"),", both positive\nintegers. The measurement is an integer between 0 and ",(0,r.kt)("inlineCode",{parentName:"p"},"length - 1"),"."),(0,r.kt)("p",null,"As before, measurements get encoded into a vector , such that one vector element\nis 1, and the rest are 0. The length of the encoded vector is equal to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"length")," parameter (the ",(0,r.kt)("inlineCode",{parentName:"p"},"chunk_length")," parameter is not relevant to measurement\nencoding). In this case, the encoding procedure is much simpler. The measurement\nis used as an index into the encoded vector, and the element that the index\npoints to is set to 1."),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("p",null,"In order to emulate a categorical histogram using DAP draft-04, we will do some\nadditional measurement pre-processing, and craft a ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," list parameter that\naligns with this preprocessing. If our categorical variable has ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," levels, then\nwe will map each level to one of ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," different numbers, and provide that number\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"Prio3Histogram")," measurement sharding function."),(0,r.kt)("p",null,"In order to have the VDAF produce ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," different counters, we need to provide a\n",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," VDAF parameter with length ",(0,r.kt)("inlineCode",{parentName:"p"},"n - 1"),". Additionally, it must map each of\nour remapped input numbers to a different bucket interval. Since measurements\nequal to a bucket boundary value get placed in the bucket to the left, and\nmeasurements between ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets[len(buckets) - 1]")," and positive infinity get\nplaced in the last bucket, we can simply set ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," to the first ",(0,r.kt)("inlineCode",{parentName:"p"},"n - 1")," of\nour remapped numbers."),(0,r.kt)("p",null,"Concretely, let us use a sequence starting at zero for our remapped numbers.\nThen, we will remap our categorical value to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"n - 1")," to produce a\nmeasurement for the VDAF. The ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets")," VDAF parameter will be\n",(0,r.kt)("inlineCode",{parentName:"p"},"[0, 1, 2, ... n - 2]"),". The aggregate results produced by the VDAF will be\nvectors of ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," numbers, corresponding to the different levels of our original\ncategorical value, in the order in which they were mapped to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," through\n",(0,r.kt)("inlineCode",{parentName:"p"},"n - 1"),"."),(0,r.kt)("p",null,'For example, if we want to make a categorical histogram of the letters "A", "B",\n"C", and "D", we would remap measurements using the following lookup table, and\ninstantiate Prio3Histogram with ',(0,r.kt)("inlineCode",{parentName:"p"},"buckets = [0, 1, 2]"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Original measurement"),(0,r.kt)("th",{parentName:"tr",align:null},"Remapped measurement"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"C"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"D"),(0,r.kt)("td",{parentName:"tr",align:null},"3")))),(0,r.kt)("p",null,'If we get an aggregate result of "7, 15, 1, 29", that means there were seven "A"\nmeasurements, fifteen "B" measurements, etc.'),(0,r.kt)("h3",{id:"multidimensional-histograms"},"Multidimensional Histograms"),(0,r.kt)("p",null,"This same strategy can be used for multidimensional histograms. Instead of\nremapping a single categorical variable to a number, you would instead define a\nmapping from a tuple of all input variables to one number."),(0,r.kt)("p",null,"For example, a multidimensional histogram of two categorical variables, with\nthree levels each, could be implemented using the lookup table below, and\nby instantiating Prio3Histogram with ",(0,r.kt)("inlineCode",{parentName:"p"},"buckets = [0, 1, 2, 3, 4, 5, 6, 7]")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Original measurement"),(0,r.kt)("th",{parentName:"tr",align:null},"Remapped measurement"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A, X"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A, Y"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A, Z"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B, X"),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B, Y"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B, Z"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"C, X"),(0,r.kt)("td",{parentName:"tr",align:null},"6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"C, Y"),(0,r.kt)("td",{parentName:"tr",align:null},"7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"C, Z"),(0,r.kt)("td",{parentName:"tr",align:null},"8")))))}u.isMDXComponent=!0}}]);